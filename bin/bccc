#!/usr/bin/env python3

# Copyright 2012 Thomas Jost
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software stributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

import configparser
import getpass
import logging
import os, os.path
from pkg_resources import resource_filename
import shutil
import sys

import bccc.ui

config_dir = os.getenv("XDG_CONFIG_HOME", "~/.config")
config_dir = os.path.expanduser(os.path.join(config_dir, "bccc"))
config_file = os.path.join(config_dir, "bccc.conf")
sample_config_file = resource_filename("bccc", "bccc.conf.sample")

# Create a default config file if none exists
if not os.path.isfile(config_file):
    print("It seems you don't have a configuration file yet. Let's create one.")
    print("You will be asked for a few simple questions.")

    # Create config dir and read sample config
    if not os.path.isdir(config_dir):
        os.makedirs(config_dir, mode=0o0700)
    with open(sample_config_file) as f:
        conf = f.read()

    # Ask personal questions
    jid = input("buddycloud login (JID): ")
    password = getpass.getpass("password: ")

    # Write config file. Using replace() is a little bit ugly, but if we used
    # ConfigParser.set() and ConfigParser.write() we would lose comments from
    # the sample config file.
    conf = conf.replace("test@example.com", jid, 1).replace("super_secret_passw0rd", password, 1)
    with open(config_file, "w") as f:
        os.chmod(config_file, 0o0600)
        f.write(conf)

    print("Your configuration file has been written to {}".format(config_file))
    input("Press enter to log in.")

# Read config file (now there should be one)
conf = configparser.ConfigParser()
if len(conf.read([config_file])) == 0:
    print("Could not read configuration file in {}".format(config_file), file=sys.stderr)
    print("A sample configuration file is available in {}.".format(sample_config_file), file=sys.stderr)
    sys.exit(1)

# Configure logging
if conf.has_option("log", "filename") and len(conf.get("log", "filename")) > 0:
    LOG_LEVELS = {"debug": logging.DEBUG, "info": logging.INFO, "warning": logging.WARNING,
                  "error": logging.ERROR, "critical": logging.CRITICAL}

    log_filename = os.path.expanduser(conf.get("log", "filename"))
    log_level = conf.get("log", "level")
    if log_level not in LOG_LEVELS.keys():
        print("Invalid log level '{}'. Possible values: {}.".format(log_level, ", ".join(LOG_LEVELS.keys())), file=sys.stderr)
        sys.exit(1)

    logging.basicConfig(level=LOG_LEVELS[log_level],
                        format='%(asctime)s %(name)s:%(levelname)s %(message)s',
                        filename=log_filename,
                        filemode="w")

# Start the UI (which will start the client)
ui = bccc.ui.UI(conf)
ui.run()

# Local Variables:
# mode: python3
# End:
