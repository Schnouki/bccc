#!/usr/bin/env python3

# Copyright 2012 Thomas Jost
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software stributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

import configparser
import logging
import os, os.path
import sys
import threading

import bccc.client, bccc.ui

config_dir = os.getenv("XDG_CONFIG_HOME", "~/.config")
config_dir = os.path.expanduser(os.path.join(config_dir, "bccc"))
config_file = os.path.join(config_dir, "bccc.conf")

conf = configparser.ConfigParser()
if len(conf.read([config_file])) == 0:
    print("Could not read configuration file in {}".format(config_file), file=sys.stderr)

    from pkg_resources import Requirement, resource_filename
    sample_config_file = resource_filename(Requirement.parse("bccc"),"bccc.conf.sample")
    print("A sample configuration file is available in {}.".format(sample_config_file), file=sys.stderr)

    sys.exit(1)

# Configure logging
if conf.has_option("log", "filename") and len(conf.get("log", "filename")) > 0:
    LOG_LEVELS = {"debug": logging.DEBUG, "info": logging.INFO, "warning": logging.WARNING,
                  "error": logging.ERROR, "critical": logging.CRITICAL}

    log_filename = os.path.expanduser(conf.get("log", "filename"))
    log_level = conf.get("log", "level")
    if log_level not in LOG_LEVELS.keys():
        print("Invalid log level '{}'. Possible values: {}.".format(log_level, ", ".join(LOG_LEVELS.keys())), file=sys.stderr)
        sys.exit(1)

    logging.basicConfig(level=LOG_LEVELS[log_level],
                        format='%(asctime)s %(name)s:%(levelname)s %(message)s',
                        filename=log_filename,
                        filemode="w")

# Get credentials
if not conf.has_option("buddycloud", "jid") or not conf.has_option("buddycloud", "password"):
    print("JID and/or password is missing in configuration file", file=sys.stderr)
    sys.exit(1)

client = bccc.client.Client(conf.get("buddycloud", "jid"), conf.get("buddycloud", "password"))
if not client.connect():
    print("Unable to connect", file=sys.stderr)
    sys.exit(1)

# Run client.process() in a daemonized thread to avoid blocking when exiting
client_thread = threading.Thread(target=lambda: client.process(block=True))
client_thread.daemon = True
client_thread.start()

ui = bccc.ui.UI(conf, client)
ui.run()
client.disconnect()

# Local Variables:
# mode: python3
# End:
